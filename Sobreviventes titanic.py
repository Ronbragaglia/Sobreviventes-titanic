# -*- coding: utf-8 -*-
"""Cópia de Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BhI9Sj13263wkPXvPz1XL7-1FwdGivXJ
"""

import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

def carregar_dados():
    return sns.load_dataset('titanic')

def pre_processamento(dados):

    features = ['fare', 'pclass', 'sex', 'embarked']


    dados = dados.dropna(subset=features + ['survived'])

    X = dados[features]
    y = dados['survived']

    X = pd.get_dummies(X, columns=['sex', 'embarked'], drop_first=True)

    return X, y

def dividir_dados(X, y):
    return train_test_split(X, y, test_size=0.2, random_state=42)

def treinar_modelo(X_treino, y_treino):
    modelo = RandomForestClassifier(n_estimators=100, random_state=42)
    modelo.fit(X_treino, y_treino)
    return modelo

def avaliar_modelo(modelo, X_teste, y_teste):
    previsoes = modelo.predict(X_teste)
    relatorio_classificacao = classification_report(y_teste, previsoes)
    matriz_confusao = confusion_matrix(y_teste, previsoes)

    print("\nAvaliação do Modelo:")
    print(relatorio_classificacao)

    print("\nMatriz de Confusão:")
    print(matriz_confusao)


def main():

    dados = carregar_dados()

    X, y = pre_processamento(dados)


    X_treino, X_teste, y_treino, y_teste = dividir_dados(X, y)


    modelo = treinar_modelo(X_treino, y_treino)

    avaliar_modelo(modelo, X_teste, y_teste)

if __name__ == "__main__":

    main()